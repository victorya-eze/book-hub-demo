name: CI / Infra / CD - Elastic Beanstalk (Docker)

on:
  push:
    branches: ["main"]

env:
  APP_DIR: book-review
  INFRA_DIR: infra
  VERSION_LABEL: v-${{ github.run_number }}

jobs:
  ci:
    name: CI - Build & Package App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (Next.js build compatible)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1

      - name: Install deps & build (supports pnpm/yarn/npm)
        working-directory: ${{ env.APP_DIR }}
        shell: bash
        run: |
          set -e
          corepack prepare pnpm@10.15.1 --activate || true

          if [ -f pnpm-lock.yaml ]; then
            # Try strict first; fallback if lock is stale
            pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
            pnpm build
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile || yarn install
            yarn build
          elif [ -f package-lock.json ]; then
            npm ci || npm install
            npm run build
          else
            npm install
            npm run build || true
          fi

      - name: Create EB source bundle (includes Dockerfile)
        shell: bash
        run: |
          cd "$APP_DIR"

          # verify Dockerfile exists at bundle root
          test -f Dockerfile || { echo "❌ Dockerfile not found in $APP_DIR"; exit 1; }

          # create a lean zip; exclude heavy build output and caches
          zip -r ../app.zip . \
            -x ".git/*" \
              ".github/*" \
              "node_modules/*" \
              ".next/*" \
              "coverage/*" \
              "dist/*" \
              "build/*" \
              "**/*.log" \
              ".DS_Store" \
              "*.tmp"

          cd ..

          # sanity check: non-empty and under 490 MB
          unzip -l app.zip | tail -n +1
          SIZE_MB=$(du -m app.zip | cut -f1)
          echo "📦 app.zip size: ${SIZE_MB} MB"
          if [ "$SIZE_MB" -eq 0 ]; then
            echo "❌ app.zip is empty"; exit 1
          fi
          if [ "$SIZE_MB" -ge 490 ]; then
            echo "❌ app.zip is too large for EB (limit 500 MB). Exclude more files."; exit 1
          fi

      - name: Upload artifact (app.zip)
        uses: actions/upload-artifact@v4
        with:
          name: app_bundle
          path: app.zip
          if-no-files-found: error

  infra:
    name: Infra - Terraform Init/Validate/Plan
    needs: [ci]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt (check)
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform validate

      - name: Terraform Plan (no changes applied)
        working-directory: ${{ env.INFRA_DIR }}
        run: |
          terraform plan -var="region=${{ secrets.AWS_REGION }}" -var="version_label=${{ env.VERSION_LABEL }}" -var="source_bundle=../app.zip" -var="app_name=eb-nextjs-demo" -var="env_name=dev" -var="platform_arn=${{ secrets.EB_PLATFORM_ARN }}"

  cd:
    name: CD - Apply & Deploy to EB
    needs: [infra]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app_bundle
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform init

      - name: Import existing IAM (idempotent)
        working-directory: ${{ env.INFRA_DIR }}
        shell: bash
        run: |
          set -e
          ROLE="eb-nextjs-demo-ec2-role"
          PROFILE="eb-nextjs-demo-instance-profile"

          # If role exists in AWS, import it into state (ignore if already imported)
          if aws iam get-role --role-name "$ROLE" >/dev/null 2>&1; then
            terraform import -no-color aws_iam_role.eb_ec2_role "$ROLE" || true
          fi

          # If instance profile exists in AWS, import it into state (ignore if already imported)
          if aws iam get-instance-profile --instance-profile-name "$PROFILE" >/dev/null 2>&1; then
            terraform import -no-color aws_iam_instance_profile.eb_ec2_instance_profile "$PROFILE" || true
          fi

      - name: Terraform Apply (creates/updates EB app/env and deploys new version)
        working-directory: ${{ env.INFRA_DIR }}
        run: |
          terraform apply -auto-approve             -var="region=${{ secrets.AWS_REGION }}"             -var="version_label=${{ env.VERSION_LABEL }}"             -var="source_bundle=../app.zip"             -var="app_name=eb-nextjs-demo"             -var="env_name=dev"             -var="platform_arn=${{ secrets.EB_PLATFORM_ARN }}"

      - name: Show EB URL
        working-directory: ${{ env.INFRA_DIR }}
        run: terraform output endpoint_url
